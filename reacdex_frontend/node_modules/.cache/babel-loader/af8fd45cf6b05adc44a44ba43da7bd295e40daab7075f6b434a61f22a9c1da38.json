{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\HomePokemons\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrameCard = styled.div`\n  width: 100%;  \n  height: auto;\n  margin: 0 auto; \n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n  background: linear-gradient(-45deg, #e3f5fd, #c9e9fa, #e3f5fd);\n\n  // background-image: linear-gradient(60deg, #08416cff 0%, #bde8fbff 100%);\n  // height: auto;\n  // min-width: 20%;\n`;\n_c = FrameCard;\nconst PokemonCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  border-radius: 8px;\n  background: #fff;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n  width: auto;\n\n  // width: 80%;\n  // width: 200px;\n  // height: 200px;\n  // min-width: 20%;\n  // padding: 15px;\n  `;\n_c2 = PokemonCard;\nconst PokeNumber = styled.p`\n  font-size: 20px;\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\n  font-weight: 700;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n  color: #333;\n`;\n_c3 = PokeNumber;\nconst PokemonImage = styled.img`\n  height: 200px;  \n  width: 200px;\n`;\nconst PokeName = styled.p`\n  font-size: 20px;\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\n  font-weight: 700;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n  color: #333;\n`;\n_c4 = PokeName;\nconst PokemonImageTypeFrame = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 6px;\n  padding: 15px;\n  margin: 5px;\n`;\n_c5 = PokemonImageTypeFrame;\nconst PokemonImageType = styled.img`\n  width: 30px;\n  height: 30px; \n`;\n_c6 = PokemonImageType;\nconst PokemonEvoGrid = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 100px;\n  min-height: 50px;\n  margin: 10px;\n  border-radius: 5px;\n  background-image: linear-gradient(60deg, #08416cff 0%, #bde8fbff 100%);\n\n  // flex-wrap: wrap;\n  // padding: 15px;\n  // background-color: #e3f5fd;\n  // box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n  \n  // gap: 15px;\n  // width: 200px;\n  // height: 200px;\n`;\n\n// const EvoLine = styled.div`\n//   // display: flex;\n//   // align-items: center;\n//   // gap: 8px;\n//   // margin-top: 8px;\n\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   flex-wrap: wrap;\n//   padding: 15px;\n//   margin: 10px;\n//   border-radius: 8px;\n//   background-color: #e3f5fd;\n//   box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n// `;\n_c7 = PokemonEvoGrid;\nconst PokeImgEvo = styled.img`\n  width: 50px;\n  height: 50px; \n`;\n\n// const Arrow = styled.span`\n//   font-size: 30px;\n//   font-weight: bold;\n//   color: #000;\n// `;\n_c8 = PokeImgEvo;\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n\n/* normaliza '#001' / '001' / 1 -> '1' */\n_c9 = Spinner;\nfunction normalizeNumber(value) {\n  if (!value) return null;\n  const digits = String(value).replace(/\\D/g, \"\");\n  return digits ? String(parseInt(digits, 10)) : null;\n}\nfunction pokeKeyFromHome(p) {\n  var _normalizeNumber;\n  return (_normalizeNumber = normalizeNumber(p === null || p === void 0 ? void 0 : p.number)) !== null && _normalizeNumber !== void 0 ? _normalizeNumber : normalizeNumber(p === null || p === void 0 ? void 0 : p.id);\n}\n\n/* monta id da imagem */\n// function imageIdForSrc(obj) {\n//   if (obj == null) return \"\";\n//   if (obj.id !== undefined && obj.id !== null) return String(obj.id);\n//   if (obj.number) {\n//     const raw = String(obj.number).replace(/^#/, \"\");\n//     if (raw) return raw;\n//   }\n//   return normalizeNumber(obj.number) || \"\";\n// }\n\nfunction HomePokemons() {\n  _s();\n  const [pokemons, setPokemons] = useState([]);\n  const [evolves, setEvolves] = useState([]);\n  const [pokemonstype, setPokemonsType] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const [resPokemons, resTypes, resEvolves] = await Promise.all([fetch(\"http://localhost:8000/home\"), fetch(\"http://localhost:8000/types\"), fetch(\"http://localhost:8000/evolves\")]);\n        if (!resPokemons.ok) throw new Error(\"Erro ao buscar pokemons\");\n        if (!resTypes.ok) throw new Error(\"Erro ao buscar types\");\n        if (!resEvolves.ok) throw new Error(\"Erro ao buscar evoluções\");\n        const pokemonsData = await resPokemons.json();\n        const typesData = await resTypes.json();\n        const evolvesData = await resEvolves.json();\n        setPokemons(pokemonsData || []);\n        setPokemonsType(typesData || []);\n        setEvolves(evolvesData || []);\n      } catch (err) {\n        console.error(\"Falha no fetch:\", err.message);\n        setPokemons([]);\n        setPokemonsType([]);\n        setEvolves([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 23\n  }, this);\n  if (!pokemons.length || !pokemonstype.length || !evolves.length) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 75\n  }, this);\n\n  // ---- AGRUPA por cadeias evolutivas (e adiciona \"solteiros\") ----\n  const evoGroups = [];\n  for (const chain of evolves) {\n    var _chain$pokemon, _chain$pokemon2;\n    const fullLine = [{\n      number: (_chain$pokemon = chain.pokemon) === null || _chain$pokemon === void 0 ? void 0 : _chain$pokemon.number,\n      name: (_chain$pokemon2 = chain.pokemon) === null || _chain$pokemon2 === void 0 ? void 0 : _chain$pokemon2.name\n    }, ...(chain.evolve || [])].filter(x => x && x.number);\n    const group = fullLine.map(ev => pokemons.find(p => pokeKeyFromHome(p) === normalizeNumber(ev.number))).filter(Boolean);\n    if (group.length) evoGroups.push(group);\n  }\n  const covered = new Set(evoGroups.flat().map(p => pokeKeyFromHome(p)).filter(Boolean));\n  const singles = pokemons.filter(p => !covered.has(pokeKeyFromHome(p)));\n  singles.forEach(single => evoGroups.push([single]));\n  for (const single of singles) {\n    evoGroups.push([single]); // um grid com um único card\n  }\n  return /*#__PURE__*/_jsxDEV(FrameCard, {\n    children: evoGroups.map((group, idx) => /*#__PURE__*/_jsxDEV(PokemonCard, {\n      children: group.map((pokemon, i) => {\n        var _pokemon$id, _pokemon$id2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(PokeNumber, {\n            children: [\"#\", (_pokemon$id2 = pokemon.id) !== null && _pokemon$id2 !== void 0 ? _pokemon$id2 : pokemon.number || \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(PokeName, {\n            style: {\n              textTransform: \"uppercase\"\n            },\n            children: pokemon.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(PokemonImageTypeFrame, {\n            children: (Array.isArray(pokemon.type) ? pokemon.type.slice(0, 2) : [pokemon.type]).filter(Boolean).map(type => /*#__PURE__*/_jsxDEV(PokemonImageType, {\n              src: `http://localhost:8000/types/${encodeURIComponent(type)}.png`,\n              alt: String(type)\n            }, type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(PokemonEvoGrid, {\n            children: (() => {\n              // encontra a cadeia do Pokémon atual\n              const chain = evolves.find(c => {\n                var _c$pokemon, _c$evolve;\n                const numbersInChain = [(_c$pokemon = c.pokemon) === null || _c$pokemon === void 0 ? void 0 : _c$pokemon.number, ...(((_c$evolve = c.evolve) === null || _c$evolve === void 0 ? void 0 : _c$evolve.map(ev => ev.number)) || [])].map(normalizeNumber);\n                return numbersInChain.includes(normalizeNumber(pokemon.number));\n              });\n              if (!chain) return null;\n\n              // junta base + evoluções\n              const fullChain = [chain.pokemon, ...(chain.evolve || [])];\n              return fullChain.map(p => /*#__PURE__*/_jsxDEV(PokeImgEvo, {\n                // src={`http://localhost:8000/home/${normalizeNumber(p.number)}/img`}\n                src: `http://localhost:8000/home/${imageIdForSrc(pokemon.number)}/img`,\n                alt: p.name\n              }, normalizeNumber(p.number), false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this));\n            })()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)]\n        }, (_pokemon$id = pokemon.id) !== null && _pokemon$id !== void 0 ? _pokemon$id : pokemon.number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this);\n      })\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePokemons, \"ZnE0jgmFQ1Y/BptpTjFefOkr0pw=\");\n_c0 = HomePokemons;\nexport default HomePokemons;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0;\n$RefreshReg$(_c, \"FrameCard\");\n$RefreshReg$(_c2, \"PokemonCard\");\n$RefreshReg$(_c3, \"PokeNumber\");\n$RefreshReg$(_c4, \"PokeName\");\n$RefreshReg$(_c5, \"PokemonImageTypeFrame\");\n$RefreshReg$(_c6, \"PokemonImageType\");\n$RefreshReg$(_c7, \"PokemonEvoGrid\");\n$RefreshReg$(_c8, \"PokeImgEvo\");\n$RefreshReg$(_c9, \"Spinner\");\n$RefreshReg$(_c0, \"HomePokemons\");","map":{"version":3,"names":["React","useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","FrameCard","div","_c","PokemonCard","_c2","PokeNumber","p","_c3","PokemonImage","img","PokeName","_c4","PokemonImageTypeFrame","_c5","PokemonImageType","_c6","PokemonEvoGrid","_c7","PokeImgEvo","_c8","spin","Spinner","_c9","normalizeNumber","value","digits","String","replace","parseInt","pokeKeyFromHome","_normalizeNumber","number","id","HomePokemons","_s","pokemons","setPokemons","evolves","setEvolves","pokemonstype","setPokemonsType","loading","setLoading","fetchData","resPokemons","resTypes","resEvolves","Promise","all","fetch","ok","Error","pokemonsData","json","typesData","evolvesData","err","console","error","message","fileName","_jsxFileName","lineNumber","columnNumber","length","evoGroups","chain","_chain$pokemon","_chain$pokemon2","fullLine","pokemon","name","evolve","filter","x","group","map","ev","find","Boolean","push","covered","Set","flat","singles","has","forEach","single","children","idx","i","_pokemon$id","_pokemon$id2","style","display","alignItems","gap","textTransform","Array","isArray","type","slice","src","encodeURIComponent","alt","c","_c$pokemon","_c$evolve","numbersInChain","includes","fullChain","imageIdForSrc","_c0","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/HomePokemons/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\n\r\nconst FrameCard = styled.div`\r\n  width: 100%;  \r\n  height: auto;\r\n  margin: 0 auto; \r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  background: linear-gradient(-45deg, #e3f5fd, #c9e9fa, #e3f5fd);\r\n\r\n  // background-image: linear-gradient(60deg, #08416cff 0%, #bde8fbff 100%);\r\n  // height: auto;\r\n  // min-width: 20%;\r\n`;\r\n\r\nconst PokemonCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 5px;\r\n  border-radius: 8px;\r\n  background: #fff;\r\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n  width: auto;\r\n\r\n  // width: 80%;\r\n  // width: 200px;\r\n  // height: 200px;\r\n  // min-width: 20%;\r\n  // padding: 15px;\r\n  `;\r\n\r\nconst PokeNumber = styled.p`\r\n  font-size: 20px;\r\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\r\n  font-weight: 700;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n  color: #333;\r\n`;\r\n\r\nconst PokemonImage = styled.img`\r\n  height: 200px;  \r\n  width: 200px;\r\n`;\r\n\r\nconst PokeName = styled.p`\r\n  font-size: 20px;\r\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\r\n  font-weight: 700;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n  color: #333;\r\n`;\r\n\r\nconst PokemonImageTypeFrame = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 6px;\r\n  padding: 15px;\r\n  margin: 5px;\r\n`;\r\n\r\nconst PokemonImageType = styled.img`\r\n  width: 30px;\r\n  height: 30px; \r\n`;\r\n\r\nconst PokemonEvoGrid = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 100px;\r\n  min-height: 50px;\r\n  margin: 10px;\r\n  border-radius: 5px;\r\n  background-image: linear-gradient(60deg, #08416cff 0%, #bde8fbff 100%);\r\n\r\n  // flex-wrap: wrap;\r\n  // padding: 15px;\r\n  // background-color: #e3f5fd;\r\n  // box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n  \r\n  // gap: 15px;\r\n  // width: 200px;\r\n  // height: 200px;\r\n`;\r\n\r\n// const EvoLine = styled.div`\r\n//   // display: flex;\r\n//   // align-items: center;\r\n//   // gap: 8px;\r\n//   // margin-top: 8px;\r\n\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   flex-wrap: wrap;\r\n//   padding: 15px;\r\n//   margin: 10px;\r\n//   border-radius: 8px;\r\n//   background-color: #e3f5fd;\r\n//   box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n// `;\r\n\r\nconst PokeImgEvo = styled.img`\r\n  width: 50px;\r\n  height: 50px; \r\n`;\r\n\r\n// const Arrow = styled.span`\r\n//   font-size: 30px;\r\n//   font-weight: bold;\r\n//   color: #000;\r\n// `;\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\n/* normaliza '#001' / '001' / 1 -> '1' */\r\nfunction normalizeNumber(value) {\r\n  if (!value) return null;\r\n  const digits = String(value).replace(/\\D/g, \"\");\r\n  return digits ? String(parseInt(digits, 10)) : null;\r\n}\r\n\r\nfunction pokeKeyFromHome(p) {\r\n  return normalizeNumber(p?.number) ?? normalizeNumber(p?.id);\r\n}\r\n\r\n/* monta id da imagem */\r\n// function imageIdForSrc(obj) {\r\n//   if (obj == null) return \"\";\r\n//   if (obj.id !== undefined && obj.id !== null) return String(obj.id);\r\n//   if (obj.number) {\r\n//     const raw = String(obj.number).replace(/^#/, \"\");\r\n//     if (raw) return raw;\r\n//   }\r\n//   return normalizeNumber(obj.number) || \"\";\r\n// }\r\n\r\nfunction HomePokemons() {\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [evolves, setEvolves] = useState([]);\r\n  const [pokemonstype, setPokemonsType] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const [resPokemons, resTypes, resEvolves] = await Promise.all([\r\n          fetch(\"http://localhost:8000/home\"),\r\n          fetch(\"http://localhost:8000/types\"),\r\n          fetch(\"http://localhost:8000/evolves\"),\r\n        ]);\r\n\r\n        if (!resPokemons.ok) throw new Error(\"Erro ao buscar pokemons\");\r\n        if (!resTypes.ok) throw new Error(\"Erro ao buscar types\");\r\n        if (!resEvolves.ok) throw new Error(\"Erro ao buscar evoluções\");\r\n\r\n        const pokemonsData = await resPokemons.json();\r\n        const typesData = await resTypes.json();\r\n        const evolvesData = await resEvolves.json();\r\n\r\n        setPokemons(pokemonsData || []);\r\n        setPokemonsType(typesData || []);\r\n        setEvolves(evolvesData || []);\r\n      } catch (err) {\r\n        console.error(\"Falha no fetch:\", err.message);\r\n        setPokemons([]);\r\n        setPokemonsType([]);\r\n        setEvolves([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <Spinner />;\r\n  if (!pokemons.length || !pokemonstype.length || !evolves.length) return <Spinner />;\r\n\r\n  // ---- AGRUPA por cadeias evolutivas (e adiciona \"solteiros\") ----\r\n  const evoGroups = [];\r\n\r\n  for (const chain of evolves) {\r\n    const fullLine = [\r\n      { number: chain.pokemon?.number, name: chain.pokemon?.name },\r\n      ...(chain.evolve || [])\r\n    ].filter(x => x && x.number);\r\n\r\n    const group = fullLine\r\n      .map(ev => pokemons.find(p => pokeKeyFromHome(p) === normalizeNumber(ev.number)))\r\n      .filter(Boolean);\r\n\r\n    if (group.length) evoGroups.push(group);\r\n  }\r\n\r\n  const covered = new Set(evoGroups.flat().map(p => pokeKeyFromHome(p)).filter(Boolean));\r\n  const singles = pokemons.filter(p => !covered.has(pokeKeyFromHome(p)));\r\n  singles.forEach(single => evoGroups.push([single]));\r\n\r\n\r\n  for (const single of singles) {\r\n    evoGroups.push([single]); // um grid com um único card\r\n  }\r\n\r\n  return (\r\n    <FrameCard>\r\n      {evoGroups.map((group, idx) => (\r\n        <PokemonCard key={idx}>\r\n          {group.map((pokemon, i) => (\r\n\r\n            <div key={pokemon.id ?? pokemon.number} style={{ display: \"flex\", alignItems: \"center\", gap: 10 }}>\r\n\r\n              <PokeNumber>#{pokemon.id ?? (pokemon.number || \"\")}</PokeNumber>\r\n\r\n\r\n\r\n              <PokeName style={{ textTransform: \"uppercase\" }}>\r\n                {pokemon.name}\r\n              </PokeName>\r\n\r\n              <PokemonImageTypeFrame>\r\n                {(Array.isArray(pokemon.type) ? pokemon.type.slice(0, 2) : [pokemon.type])\r\n                  .filter(Boolean)\r\n                  .map((type) => (\r\n                    <PokemonImageType\r\n                      key={type}\r\n                      src={`http://localhost:8000/types/${encodeURIComponent(type)}.png`}\r\n                      alt={String(type)}\r\n                    />\r\n                  ))}\r\n              </PokemonImageTypeFrame>\r\n              <PokemonEvoGrid>\r\n                {(() => {\r\n                  // encontra a cadeia do Pokémon atual\r\n                  const chain = evolves.find((c) => {\r\n                    const numbersInChain = [\r\n                      c.pokemon?.number,\r\n                      ...(c.evolve?.map((ev) => ev.number) || []),\r\n                    ].map(normalizeNumber);\r\n                    return numbersInChain.includes(normalizeNumber(pokemon.number));\r\n                  });\r\n\r\n                  if (!chain) return null;\r\n\r\n                  // junta base + evoluções\r\n                  const fullChain = [chain.pokemon, ...(chain.evolve || [])];\r\n\r\n                  return fullChain.map((p) => (\r\n                    <PokeImgEvo\r\n                      key={normalizeNumber(p.number)}\r\n                      // src={`http://localhost:8000/home/${normalizeNumber(p.number)}/img`}\r\n                      src={`http://localhost:8000/home/${imageIdForSrc(pokemon.number)}/img`}\r\n                      alt={p.name}\r\n                    />\r\n                  ));\r\n                })()}\r\n              </PokemonEvoGrid>\r\n\r\n\r\n            </div>\r\n          ))}\r\n\r\n        </PokemonCard>\r\n      ))}\r\n    </FrameCard>\r\n  );\r\n}\r\n\r\nexport default HomePokemons;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,IAAIC,SAAS,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtD,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAfIF,SAAS;AAiBf,MAAMG,WAAW,GAAGP,MAAM,CAACK,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAACG,GAAA,GAfED,WAAW;AAiBjB,MAAME,UAAU,GAAGT,MAAM,CAACU,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAPIF,UAAU;AAShB,MAAMG,YAAY,GAAGZ,MAAM,CAACa,GAAG;AAC/B;AACA;AACA,CAAC;AAED,MAAMC,QAAQ,GAAGd,MAAM,CAACU,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACK,GAAA,GAPID,QAAQ;AASd,MAAME,qBAAqB,GAAGhB,MAAM,CAACK,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACY,GAAA,GATID,qBAAqB;AAW3B,MAAME,gBAAgB,GAAGlB,MAAM,CAACa,GAAG;AACnC;AACA;AACA,CAAC;AAACM,GAAA,GAHID,gBAAgB;AAKtB,MAAME,cAAc,GAAGpB,MAAM,CAACK,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAgB,GAAA,GAnCMD,cAAc;AAqCpB,MAAME,UAAU,GAAGtB,MAAM,CAACa,GAAG;AAC7B;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AAAAU,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}