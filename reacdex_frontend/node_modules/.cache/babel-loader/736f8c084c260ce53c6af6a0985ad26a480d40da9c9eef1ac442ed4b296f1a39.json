{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\routes\\\\Types.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokemonImageTypeFrame = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 6px;\n  flex-wrap: wrap;\n  margin-top: 20px;\n`;\n_c = PokemonImageTypeFrame;\nconst PokemonImageType = styled.img`\n  width: 50px;\n  height: 50px;\n  object-fit: contain;\n  transition: transform 0.2s;\n  &:hover {\n    transform: scale(1.15);\n  }\n`;\n_c2 = PokemonImageType;\nfunction Types() {\n  _s();\n  const [types, setTypes] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:8000/types\") // rota backend\n    .then(res => res.json()).then(data => setTypes(data)).catch(err => console.error(\"Erro ao buscar tipos:\", err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Tipos de Pok\\xE9mon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PokemonImageTypeFrame, {\n      children: types.map(type => /*#__PURE__*/_jsxDEV(PokemonImageType, {\n        src: `http://localhost:8000/types/${encodeURIComponent(type)}.png`,\n        alt: type\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(Types, \"KbbD0RQTCnu9UyxZuGxyOo5eB1I=\");\n_c3 = Types;\nexport default Types;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PokemonImageTypeFrame\");\n$RefreshReg$(_c2, \"PokemonImageType\");\n$RefreshReg$(_c3, \"Types\");","map":{"version":3,"names":["useEffect","useState","styled","jsxDEV","_jsxDEV","PokemonImageTypeFrame","div","_c","PokemonImageType","img","_c2","Types","_s","types","setTypes","fetch","then","res","json","data","catch","err","console","error","style","padding","children","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","map","type","src","encodeURIComponent","alt","_c3","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/routes/Types.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PokemonImageTypeFrame = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 6px;\r\n  flex-wrap: wrap;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst PokemonImageType = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  object-fit: contain;\r\n  transition: transform 0.2s;\r\n  &:hover {\r\n    transform: scale(1.15);\r\n  }\r\n`;\r\n\r\nfunction Types() {\r\n  const [types, setTypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:8000/types\") // rota backend\r\n      .then((res) => res.json())\r\n      .then((data) => setTypes(data))\r\n      .catch((err) => console.error(\"Erro ao buscar tipos:\", err));\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h1 style={{ textAlign: \"center\" }}>Tipos de Pok√©mon</h1>\r\n\r\n      <PokemonImageTypeFrame>\r\n        {types.map((type) => (\r\n          <PokemonImageType\r\n            key={type}\r\n            src={`http://localhost:8000/types/${encodeURIComponent(type)}.png`}\r\n            alt={type}\r\n          />\r\n        ))}\r\n      </PokemonImageTypeFrame>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Types;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,qBAAqB,GAAGH,MAAM,CAACI,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,qBAAqB;AAQ3B,MAAMG,gBAAgB,GAAGN,MAAM,CAACO,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GARIF,gBAAgB;AAUtB,SAASG,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACde,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAAA,CAClCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9BC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKoB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BtB,OAAA;MAAIoB,KAAK,EAAE;QAAEG,SAAS,EAAE;MAAS,CAAE;MAAAD,QAAA,EAAC;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzD3B,OAAA,CAACC,qBAAqB;MAAAqB,QAAA,EACnBb,KAAK,CAACmB,GAAG,CAAEC,IAAI,iBACd7B,OAAA,CAACI,gBAAgB;QAEf0B,GAAG,EAAE,+BAA+BC,kBAAkB,CAACF,IAAI,CAAC,MAAO;QACnEG,GAAG,EAAEH;MAAK,GAFLA,IAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACmB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV;AAACnB,EAAA,CAzBQD,KAAK;AAAA0B,GAAA,GAAL1B,KAAK;AA2Bd,eAAeA,KAAK;AAAC,IAAAJ,EAAA,EAAAG,GAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA/B,EAAA;AAAA+B,YAAA,CAAA5B,GAAA;AAAA4B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}