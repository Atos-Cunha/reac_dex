{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\CardPokemons\\\\index.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardPokemons() {\n  _s();\n  const [pokemons, setPokemons] = useState([]);\n  const [evolves, setEvolves] = useState([]);\n  const [pokemonstype, setPokemonsType] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const [resPokemons, resTypes, resEvolves] = await Promise.all([fetch(\"http://localhost:8000/home\"), fetch(\"http://localhost:8000/type\"), fetch(\"http://localhost:8000/evolve\")]);\n        if (!resPokemons.ok) throw new Error(\"Erro ao buscar pokemons\");\n        if (!resTypes.ok) throw new Error(\"Erro ao buscar types\");\n        if (!resEvolves.ok) throw new Error(\"Erro ao buscar evoluções\");\n        const pokemonsData = await resPokemons.json();\n        const typesData = await resTypes.json();\n        const evolvesData = await resEvolves.json();\n        setPokemons(pokemonsData || []);\n        setPokemonsType(typesData || []);\n        setEvolves(evolvesData || []);\n      } catch (err) {\n        console.error(\"Falha no fetch:\", err.message);\n        setPokemons([]);\n        setPokemonsType([]);\n        setEvolves([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 23\n  }, this);\n\n  // ---- Agrupando evoluções ----\n  const evoGroups = evolves.map(ev => {\n    return [{\n      number: ev.pokemon.number,\n      name: ev.pokemon.name\n    }, ...(ev.evolve || [])];\n  });\n\n  // Pegar todos ids que já estão em alguma linha de evolução\n  const evoNumbers = new Set(evoGroups.flat().map(p => normalizeNumber(p.number)));\n\n  // Pokémons que não aparecem em nenhuma linha evolutiva\n  const standalones = pokemons.filter(p => !evoNumbers.has(normalizeNumber(p.number)));\n  function renderPokemonCard(pokemon, highlight = false) {\n    var _pokemon$id, _pokemon$id2, _pokemon$name;\n    const CardComponent = highlight ? PokemonCardHighlighted : PokemonCard;\n    return /*#__PURE__*/_jsxDEV(CardComponent, {\n      children: [/*#__PURE__*/_jsxDEV(PokeNumber, {\n        children: [\"#\", (_pokemon$id2 = pokemon.id) !== null && _pokemon$id2 !== void 0 ? _pokemon$id2 : pokemon.number]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PokemonImage, {\n        src: pokemon.image || `http://localhost:8000/home/${imageIdForSrc(pokemon)}/img`,\n        alt: pokemon.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PokeName, {\n        children: ((_pokemon$name = pokemon.name) === null || _pokemon$name === void 0 ? void 0 : _pokemon$name.toUpperCase()) || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PokemonImageTypeFrame, {\n        children: (Array.isArray(pokemon.type) ? pokemon.type.slice(0, 2) : [pokemon.type]).filter(Boolean).map((type, idx) => /*#__PURE__*/_jsxDEV(PokemonImageType, {\n          src: `http://localhost:8000/type/${encodeURIComponent(type)}.png`,\n          alt: String(type)\n        }, type !== null && type !== void 0 ? type : idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, (_pokemon$id = pokemon.id) !== null && _pokemon$id !== void 0 ? _pokemon$id : pokemon.number, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [evoGroups.map((group, gIdx) => /*#__PURE__*/_jsxDEV(PokemonCardHighlighted, {\n      children: /*#__PURE__*/_jsxDEV(EvoLine, {\n        children: group.map((ev, idx) => {\n          const poke = pokemons.find(p => normalizeNumber(p.number) === normalizeNumber(ev.number));\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: 4\n            },\n            children: [idx > 0 && /*#__PURE__*/_jsxDEV(Arrow, {\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 31\n            }, this), poke ? renderPokemonCard(poke) : /*#__PURE__*/_jsxDEV(PokeImgEvo, {\n              src: `http://localhost:8000/home/${ev.number}/img`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 53\n            }, this)]\n          }, ev.number, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, `group-${gIdx}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)), standalones.map(poke => renderPokemonCard(poke))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(CardPokemons, \"ZnE0jgmFQ1Y/BptpTjFefOkr0pw=\");\n_c = CardPokemons;\nvar _c;\n$RefreshReg$(_c, \"CardPokemons\");","map":{"version":3,"names":["CardPokemons","_s","pokemons","setPokemons","useState","evolves","setEvolves","pokemonstype","setPokemonsType","loading","setLoading","useEffect","fetchData","resPokemons","resTypes","resEvolves","Promise","all","fetch","ok","Error","pokemonsData","json","typesData","evolvesData","err","console","error","message","_jsxDEV","Spinner","fileName","_jsxFileName","lineNumber","columnNumber","evoGroups","map","ev","number","pokemon","name","evolve","evoNumbers","Set","flat","p","normalizeNumber","standalones","filter","has","renderPokemonCard","highlight","_pokemon$id","_pokemon$id2","_pokemon$name","CardComponent","PokemonCardHighlighted","PokemonCard","children","PokeNumber","id","PokemonImage","src","image","imageIdForSrc","alt","PokeName","toUpperCase","PokemonImageTypeFrame","Array","isArray","type","slice","Boolean","idx","PokemonImageType","encodeURIComponent","String","Card","group","gIdx","EvoLine","poke","find","style","display","alignItems","gap","Arrow","PokeImgEvo","_c","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/CardPokemons/index.js"],"sourcesContent":["function CardPokemons() {\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [evolves, setEvolves] = useState([]);\r\n  const [pokemonstype, setPokemonsType] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const [resPokemons, resTypes, resEvolves] = await Promise.all([\r\n          fetch(\"http://localhost:8000/home\"),\r\n          fetch(\"http://localhost:8000/type\"),\r\n          fetch(\"http://localhost:8000/evolve\"),\r\n        ]);\r\n\r\n        if (!resPokemons.ok) throw new Error(\"Erro ao buscar pokemons\");\r\n        if (!resTypes.ok) throw new Error(\"Erro ao buscar types\");\r\n        if (!resEvolves.ok) throw new Error(\"Erro ao buscar evoluções\");\r\n\r\n        const pokemonsData = await resPokemons.json();\r\n        const typesData = await resTypes.json();\r\n        const evolvesData = await resEvolves.json();\r\n\r\n        setPokemons(pokemonsData || []);\r\n        setPokemonsType(typesData || []);\r\n        setEvolves(evolvesData || []);\r\n\r\n      } catch (err) {\r\n        console.error(\"Falha no fetch:\", err.message);\r\n        setPokemons([]);\r\n        setPokemonsType([]);\r\n        setEvolves([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <Spinner />;\r\n\r\n  // ---- Agrupando evoluções ----\r\n  const evoGroups = evolves.map(ev => {\r\n    return [\r\n      { number: ev.pokemon.number, name: ev.pokemon.name },\r\n      ...(ev.evolve || [])\r\n    ];\r\n  });\r\n\r\n  // Pegar todos ids que já estão em alguma linha de evolução\r\n  const evoNumbers = new Set(\r\n    evoGroups.flat().map(p => normalizeNumber(p.number))\r\n  );\r\n\r\n  // Pokémons que não aparecem em nenhuma linha evolutiva\r\n  const standalones = pokemons.filter(p => !evoNumbers.has(normalizeNumber(p.number)));\r\n\r\n  function renderPokemonCard(pokemon, highlight = false) {\r\n    const CardComponent = highlight ? PokemonCardHighlighted : PokemonCard;\r\n    return (\r\n      <CardComponent key={pokemon.id ?? pokemon.number}>\r\n        <PokeNumber>#{pokemon.id ?? pokemon.number}</PokeNumber>\r\n        <PokemonImage\r\n          src={pokemon.image || `http://localhost:8000/home/${imageIdForSrc(pokemon)}/img`}\r\n          alt={pokemon.name}\r\n        />\r\n        <PokeName>{pokemon.name?.toUpperCase() || \"\"}</PokeName>\r\n        <PokemonImageTypeFrame>\r\n          {(Array.isArray(pokemon.type) ? pokemon.type.slice(0, 2) : [pokemon.type])\r\n            .filter(Boolean)\r\n            .map((type, idx) => (\r\n              <PokemonImageType\r\n                key={type ?? idx}\r\n                src={`http://localhost:8000/type/${encodeURIComponent(type)}.png`}\r\n                alt={String(type)}\r\n              />\r\n            ))}\r\n        </PokemonImageTypeFrame>\r\n      </CardComponent>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      {/* Renderiza grupos de evolução */}\r\n      {evoGroups.map((group, gIdx) => (\r\n        <PokemonCardHighlighted key={`group-${gIdx}`}>\r\n          <EvoLine>\r\n            {group.map((ev, idx) => {\r\n              const poke = pokemons.find(p => normalizeNumber(p.number) === normalizeNumber(ev.number));\r\n              return (\r\n                <span key={ev.number} style={{ display: \"flex\", alignItems: \"center\", gap: 4 }}>\r\n                  {idx > 0 && <Arrow>→</Arrow>}\r\n                  {poke ? renderPokemonCard(poke) : <PokeImgEvo src={`http://localhost:8000/home/${ev.number}/img`} />}\r\n                </span>\r\n              );\r\n            })}\r\n          </EvoLine>\r\n        </PokemonCardHighlighted>\r\n      ))}\r\n\r\n      {/* Renderiza os que não têm evolução */}\r\n      {standalones.map(poke => renderPokemonCard(poke))}\r\n    </Card>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}