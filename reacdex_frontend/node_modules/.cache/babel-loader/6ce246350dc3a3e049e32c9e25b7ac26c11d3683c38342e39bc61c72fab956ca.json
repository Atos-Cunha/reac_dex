{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\FrameTypes\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FramePokeImgType = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 15px;\n  margin: 5px;\n`;\n_c = FramePokeImgType;\nconst Card = styled.div`\n  height: auto;\n  margin: 0 auto;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n  background: linear-gradient(-45deg, #e3f5fd, #c9e9fa, #e3f5fd);\n`;\n_c2 = Card;\nconst PokeImgType = styled.img`\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n`;\n_c3 = PokeImgType;\nconst TitleType = styled.h3`\n  text-transform: uppercase;\n  font-size: 18px;\n  margin: 10px 0;\n`;\n_c4 = TitleType;\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n\n// === Componente Principal ===\n_c5 = Spinner;\nfunction FrameTypes() {\n  _s();\n  const [types, setTypes] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchTypes() {\n      try {\n        // 1 - Buscar lista de tipos\n        const res = await fetch(\"http://localhost:8000/types\");\n        if (!res.ok) throw new Error(\"Erro ao buscar tipos\");\n        const data = await res.json();\n        const uniqueTypes = [...new Set(data.map(t => t.type))];\n\n        // 2 - Para cada tipo, buscar imagens dos pokémons\n        const typeData = {};\n        for (const type of uniqueTypes) {\n          try {\n            const resType = await fetch(`http://localhost:8000/types/${encodeURIComponent(type)}`);\n            if (!resType.ok) throw new Error(`Erro ao buscar ${type}`);\n            const imgs = await resType.json(); // supondo que o backend retorne um array de imagens\n            typeData[type] = imgs;\n          } catch (err) {\n            console.error(\"Erro ao buscar imagens de\", type, err.message);\n            typeData[type] = [];\n          }\n        }\n        setTypes(typeData);\n      } catch (err) {\n        console.error(\"Erro no fetch:\", err.message);\n        setTypes({});\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchTypes();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 23\n  }, this);\n  if (!Object.keys(types).length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Nenhum tipo encontrado.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 42\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FramePokeImgType, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: Object.entries(types).map(([type, imgs]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [console.log(type), /*#__PURE__*/_jsxDEV(TitleType, {\n          children: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), imgs.map((img, idx) => /*#__PURE__*/_jsxDEV(PokeImgType, {\n          src: img,\n          alt: `${type}-${idx}`\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this))]\n      }, type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(FrameTypes, \"VrPlc2wWxyP7Mj7n4VD4NzFvZ80=\");\n_c6 = FrameTypes;\nexport default FrameTypes;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"FramePokeImgType\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"PokeImgType\");\n$RefreshReg$(_c4, \"TitleType\");\n$RefreshReg$(_c5, \"Spinner\");\n$RefreshReg$(_c6, \"FrameTypes\");","map":{"version":3,"names":["useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","FramePokeImgType","div","_c","Card","_c2","PokeImgType","img","_c3","TitleType","h3","_c4","spin","Spinner","_c5","FrameTypes","_s","types","setTypes","loading","setLoading","fetchTypes","res","fetch","ok","Error","data","json","uniqueTypes","Set","map","t","type","typeData","resType","encodeURIComponent","imgs","err","console","error","message","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","children","entries","log","idx","src","alt","_c6","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/FrameTypes/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst FramePokeImgType = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding: 15px;\r\n  margin: 5px;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  height: auto;\r\n  margin: 0 auto;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  background: linear-gradient(-45deg, #e3f5fd, #c9e9fa, #e3f5fd);\r\n`;\r\n\r\nconst PokeImgType = styled.img`\r\n  width: 60px;\r\n  height: 60px;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst TitleType = styled.h3`\r\n  text-transform: uppercase;\r\n  font-size: 18px;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\n// === Componente Principal ===\r\nfunction FrameTypes() {\r\n  const [types, setTypes] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchTypes() {\r\n      try {\r\n        // 1 - Buscar lista de tipos\r\n        const res = await fetch(\"http://localhost:8000/types\");\r\n        if (!res.ok) throw new Error(\"Erro ao buscar tipos\");\r\n        const data = await res.json();\r\n\r\n        const uniqueTypes = [...new Set(data.map((t) => t.type))];\r\n\r\n        // 2 - Para cada tipo, buscar imagens dos pokémons\r\n        const typeData = {};\r\n        for (const type of uniqueTypes) {\r\n          try {\r\n            const resType = await fetch(\r\n              `http://localhost:8000/types/${encodeURIComponent(type)}`\r\n            );\r\n            if (!resType.ok) throw new Error(`Erro ao buscar ${type}`);\r\n            const imgs = await resType.json(); // supondo que o backend retorne um array de imagens\r\n            typeData[type] = imgs;\r\n          } catch (err) {\r\n            console.error(\"Erro ao buscar imagens de\", type, err.message);\r\n            typeData[type] = [];\r\n          }\r\n        }\r\n\r\n        setTypes(typeData);\r\n      } catch (err) {\r\n        console.error(\"Erro no fetch:\", err.message);\r\n        setTypes({});\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchTypes();\r\n  }, []);\r\n\r\n  if (loading) return <Spinner />;\r\n  if (!Object.keys(types).length) return <p>Nenhum tipo encontrado.</p>;\r\n\r\n  return (\r\n    <FramePokeImgType>\r\n      <Card>\r\n        {Object.entries(types).map(([type, imgs]) => (\r\n          <div key={type}>\r\n            {console.log(type)}\r\n            <TitleType>{type}</TitleType>\r\n              {imgs.map((img, idx) => (\r\n                <PokeImgType key={idx} src={img} alt={`${type}-${idx}`} />\r\n              ))}\r\n          </div>\r\n        ))}\r\n      </Card>\r\n    </FramePokeImgType>\r\n  );\r\n}\r\n\r\nexport default FrameTypes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}