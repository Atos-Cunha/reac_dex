{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\CardPokemons\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = styled.div`\n  height: auto;\n  margin: 0 auto; \n  background-color: #e3f5fd;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n_c = Card;\nconst PokemonCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 15px;\n  margin: 5px;\n  border-radius: 8px;\n  background: #fff;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n`;\n_c2 = PokemonCard;\nconst PokemonEvoGrid = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  padding: 15px;\n  margin: 10px;\n  border-radius: 8px;\n  background: #0000008a;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n  gap: 15px;\n`;\n_c3 = PokemonEvoGrid;\nconst PokeNumber = styled.p`\n  font-size: 20px;\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\n  font-weight: 700;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n  color: #333;\n`;\n_c4 = PokeNumber;\nconst PokemonImage = styled.img`\n  height: 200px;  \n  width: 200px;\n`;\n_c5 = PokemonImage;\nconst PokeName = styled.p`\n  font-size: 20px;\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\n  font-weight: 700;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n  color: #333;\n`;\n_c6 = PokeName;\nconst PokemonImageTypeFrame = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 6px;\n  padding: 15px;\n  margin: 5px;\n`;\n_c7 = PokemonImageTypeFrame;\nconst PokemonImageType = styled.img`\n  width: 30px;\n  height: 30px; \n`;\n_c8 = PokemonImageType;\nconst Arrow = styled.span`\n  font-size: 22px;\n  font-weight: bold;\n  color: white;\n`;\n_c9 = Arrow;\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n\n/* normaliza '#001' / '001' / 1 -> '1' */\n_c0 = Spinner;\nfunction normalizeNumber(value) {\n  if (value === undefined || value === null) return null;\n  const s = String(value);\n  const digits = s.replace(/\\D/g, \"\");\n  if (!digits) return null;\n  return String(parseInt(digits, 10));\n}\n\n/* id/number normalizado de um Pokémon do /home */\nfunction pokeKeyFromHome(p) {\n  var _normalizeNumber;\n  return (_normalizeNumber = normalizeNumber(p === null || p === void 0 ? void 0 : p.number)) !== null && _normalizeNumber !== void 0 ? _normalizeNumber : normalizeNumber(p === null || p === void 0 ? void 0 : p.id);\n}\n\n/* monta id da imagem */\nfunction imageIdForSrc(obj) {\n  if (obj == null) return \"\";\n  if (obj.id !== undefined && obj.id !== null) return String(obj.id);\n  if (obj.number) {\n    const raw = String(obj.number).replace(/^#/, \"\");\n    if (raw) return raw;\n  }\n  return normalizeNumber(obj.number) || \"\";\n}\nfunction CardPokemons() {\n  _s();\n  const [pokemons, setPokemons] = useState([]);\n  const [evolves, setEvolves] = useState([]);\n  const [pokemonstype, setPokemonsType] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const [resPokemons, resTypes, resEvolves] = await Promise.all([fetch(\"http://localhost:8000/home\"), fetch(\"http://localhost:8000/type\"), fetch(\"http://localhost:8000/evolve\")]);\n        if (!resPokemons.ok) throw new Error(\"Erro ao buscar pokemons\");\n        if (!resTypes.ok) throw new Error(\"Erro ao buscar types\");\n        if (!resEvolves.ok) throw new Error(\"Erro ao buscar evoluções\");\n        const pokemonsData = await resPokemons.json();\n        const typesData = await resTypes.json();\n        const evolvesData = await resEvolves.json();\n        setPokemons(pokemonsData || []);\n        setPokemonsType(typesData || []);\n        setEvolves(evolvesData || []);\n      } catch (err) {\n        console.error(\"Falha no fetch:\", err.message);\n        setPokemons([]);\n        setPokemonsType([]);\n        setEvolves([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 23\n  }, this);\n  if (!(pokemons !== null && pokemons !== void 0 && pokemons.length)) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 33\n  }, this);\n  if (!(pokemonstype !== null && pokemonstype !== void 0 && pokemonstype.length)) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 37\n  }, this);\n\n  // ---- AGRUPA por cadeias evolutivas (e adiciona \"solteiros\") ----\n  const evoGroups = [];\n\n  // 1) grupos vindos do /evolve\n  for (const chain of evolves || []) {\n    var _chain$pokemon, _chain$pokemon2;\n    const fullLine = [{\n      number: chain === null || chain === void 0 ? void 0 : (_chain$pokemon = chain.pokemon) === null || _chain$pokemon === void 0 ? void 0 : _chain$pokemon.number,\n      name: chain === null || chain === void 0 ? void 0 : (_chain$pokemon2 = chain.pokemon) === null || _chain$pokemon2 === void 0 ? void 0 : _chain$pokemon2.name\n    }, ...((chain === null || chain === void 0 ? void 0 : chain.evolve) || [])].filter(x => x && x.number);\n    const group = fullLine.map(ev => pokemons.find(p => pokeKeyFromHome(p) === normalizeNumber(ev.number))).filter(Boolean);\n    if (group.length > 0) {\n      evoGroups.push(group);\n    }\n  }\n\n  // 2) adiciona pokémon que não apareceu em nenhuma cadeia (sem evolução)\n  const covered = new Set(evoGroups.flat().map(p => pokeKeyFromHome(p)).filter(Boolean));\n  const singles = pokemons.filter(p => {\n    const key = pokeKeyFromHome(p);\n    return key && !covered.has(key);\n  });\n  for (const single of singles) {\n    evoGroups.push([single]); // um grid com um único card\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: evoGroups.map((group, idx) => /*#__PURE__*/_jsxDEV(PokemonEvoGrid, {\n      children: group.map((pokemon, i) => {\n        var _pokemon$id, _pokemon$id2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(PokemonCard, {\n            children: [/*#__PURE__*/_jsxDEV(PokeNumber, {\n              children: [\"#\", (_pokemon$id2 = pokemon.id) !== null && _pokemon$id2 !== void 0 ? _pokemon$id2 : pokemon.number || \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PokemonImage, {\n              src: pokemon.image || `http://localhost:8000/home/${imageIdForSrc(pokemon)}/img`,\n              alt: pokemon.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PokeName, {\n              style: {\n                textTransform: \"uppercase\"\n              },\n              children: pokemon.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PokemonImageTypeFrame, {\n              children: (Array.isArray(pokemon.type) ? pokemon.type.slice(0, 2) : [pokemon.type]).filter(Boolean).map(type => /*#__PURE__*/_jsxDEV(PokemonImageType, {\n                src: `http://localhost:8000/type/${encodeURIComponent(type)}.png`,\n                alt: String(type)\n              }, type, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), i < group.length - 1 && /*#__PURE__*/_jsxDEV(Arrow, {\n            children: \"\\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 40\n          }, this)]\n        }, (_pokemon$id = pokemon.id) !== null && _pokemon$id !== void 0 ? _pokemon$id : pokemon.number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this);\n      })\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(CardPokemons, \"ZnE0jgmFQ1Y/BptpTjFefOkr0pw=\");\n_c1 = CardPokemons;\nexport default CardPokemons;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"PokemonCard\");\n$RefreshReg$(_c3, \"PokemonEvoGrid\");\n$RefreshReg$(_c4, \"PokeNumber\");\n$RefreshReg$(_c5, \"PokemonImage\");\n$RefreshReg$(_c6, \"PokeName\");\n$RefreshReg$(_c7, \"PokemonImageTypeFrame\");\n$RefreshReg$(_c8, \"PokemonImageType\");\n$RefreshReg$(_c9, \"Arrow\");\n$RefreshReg$(_c0, \"Spinner\");\n$RefreshReg$(_c1, \"CardPokemons\");","map":{"version":3,"names":["useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","Card","div","_c","PokemonCard","_c2","PokemonEvoGrid","_c3","PokeNumber","p","_c4","PokemonImage","img","_c5","PokeName","_c6","PokemonImageTypeFrame","_c7","PokemonImageType","_c8","Arrow","span","_c9","spin","Spinner","_c0","normalizeNumber","value","undefined","s","String","digits","replace","parseInt","pokeKeyFromHome","_normalizeNumber","number","id","imageIdForSrc","obj","raw","CardPokemons","_s","pokemons","setPokemons","evolves","setEvolves","pokemonstype","setPokemonsType","loading","setLoading","fetchData","resPokemons","resTypes","resEvolves","Promise","all","fetch","ok","Error","pokemonsData","json","typesData","evolvesData","err","console","error","message","fileName","_jsxFileName","lineNumber","columnNumber","length","evoGroups","chain","_chain$pokemon","_chain$pokemon2","fullLine","pokemon","name","evolve","filter","x","group","map","ev","find","Boolean","push","covered","Set","flat","singles","key","has","single","children","idx","i","_pokemon$id","_pokemon$id2","style","display","alignItems","gap","src","image","alt","textTransform","Array","isArray","type","slice","encodeURIComponent","_c1","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/CardPokemons/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n  height: auto;\r\n  margin: 0 auto; \r\n  background-color: #e3f5fd;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst PokemonCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 15px;\r\n  margin: 5px;\r\n  border-radius: 8px;\r\n  background: #fff;\r\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n`;\r\n\r\nconst PokemonEvoGrid = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  padding: 15px;\r\n  margin: 10px;\r\n  border-radius: 8px;\r\n  background: #0000008a;\r\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n  gap: 15px;\r\n`;\r\n\r\nconst PokeNumber = styled.p`\r\n  font-size: 20px;\r\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\r\n  font-weight: 700;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n  color: #333;\r\n`;\r\n\r\nconst PokemonImage = styled.img`\r\n  height: 200px;  \r\n  width: 200px;\r\n`;\r\n\r\nconst PokeName = styled.p`\r\n  font-size: 20px;\r\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\r\n  font-weight: 700;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n  color: #333;\r\n`;\r\n\r\nconst PokemonImageTypeFrame = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 6px;\r\n  padding: 15px;\r\n  margin: 5px;\r\n`;\r\n\r\nconst PokemonImageType = styled.img`\r\n  width: 30px;\r\n  height: 30px; \r\n`;\r\n\r\nconst Arrow = styled.span`\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  color: white;\r\n`;\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\n/* normaliza '#001' / '001' / 1 -> '1' */\r\nfunction normalizeNumber(value) {\r\n  if (value === undefined || value === null) return null;\r\n  const s = String(value);\r\n  const digits = s.replace(/\\D/g, \"\");\r\n  if (!digits) return null;\r\n  return String(parseInt(digits, 10));\r\n}\r\n\r\n/* id/number normalizado de um Pokémon do /home */\r\nfunction pokeKeyFromHome(p) {\r\n  return normalizeNumber(p?.number) ?? normalizeNumber(p?.id);\r\n}\r\n\r\n/* monta id da imagem */\r\nfunction imageIdForSrc(obj) {\r\n  if (obj == null) return \"\";\r\n  if (obj.id !== undefined && obj.id !== null) return String(obj.id);\r\n  if (obj.number) {\r\n    const raw = String(obj.number).replace(/^#/, \"\");\r\n    if (raw) return raw;\r\n  }\r\n  return normalizeNumber(obj.number) || \"\";\r\n}\r\n\r\nfunction CardPokemons() {\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [evolves, setEvolves] = useState([]);\r\n  const [pokemonstype, setPokemonsType] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const [resPokemons, resTypes, resEvolves] = await Promise.all([\r\n          fetch(\"http://localhost:8000/home\"),\r\n          fetch(\"http://localhost:8000/type\"),\r\n          fetch(\"http://localhost:8000/evolve\"),\r\n        ]);\r\n\r\n        if (!resPokemons.ok) throw new Error(\"Erro ao buscar pokemons\");\r\n        if (!resTypes.ok) throw new Error(\"Erro ao buscar types\");\r\n        if (!resEvolves.ok) throw new Error(\"Erro ao buscar evoluções\");\r\n\r\n        const pokemonsData = await resPokemons.json();\r\n        const typesData = await resTypes.json();\r\n        const evolvesData = await resEvolves.json();\r\n\r\n        setPokemons(pokemonsData || []);\r\n        setPokemonsType(typesData || []);\r\n        setEvolves(evolvesData || []);\r\n      } catch (err) {\r\n        console.error(\"Falha no fetch:\", err.message);\r\n        setPokemons([]);\r\n        setPokemonsType([]);\r\n        setEvolves([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <Spinner />;\r\n  if (!pokemons?.length) return <Spinner />;\r\n  if (!pokemonstype?.length) return <Spinner />;\r\n\r\n  // ---- AGRUPA por cadeias evolutivas (e adiciona \"solteiros\") ----\r\n  const evoGroups = [];\r\n\r\n  // 1) grupos vindos do /evolve\r\n  for (const chain of (evolves || [])) {\r\n    const fullLine = [\r\n      { number: chain?.pokemon?.number, name: chain?.pokemon?.name },\r\n      ...((chain?.evolve) || []),\r\n    ].filter(x => x && x.number);\r\n\r\n    const group = fullLine\r\n      .map(ev => pokemons.find(p => pokeKeyFromHome(p) === normalizeNumber(ev.number)))\r\n      .filter(Boolean);\r\n\r\n    if (group.length > 0) {\r\n      evoGroups.push(group);\r\n    }\r\n  }\r\n\r\n  // 2) adiciona pokémon que não apareceu em nenhuma cadeia (sem evolução)\r\n  const covered = new Set(\r\n    evoGroups.flat().map(p => pokeKeyFromHome(p)).filter(Boolean)\r\n  );\r\n\r\n  const singles = pokemons.filter(p => {\r\n    const key = pokeKeyFromHome(p);\r\n    return key && !covered.has(key);\r\n  });\r\n\r\n  for (const single of singles) {\r\n    evoGroups.push([single]); // um grid com um único card\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      {evoGroups.map((group, idx) => (\r\n        <PokemonEvoGrid key={idx}>\r\n          {group.map((pokemon, i) => (\r\n            <div key={pokemon.id ?? pokemon.number} style={{ display: \"flex\", alignItems: \"center\", gap: 10 }}>\r\n              <PokemonCard>\r\n                <PokeNumber>#{pokemon.id ?? (pokemon.number || \"\")}</PokeNumber>\r\n\r\n                <PokemonImage\r\n                  src={\r\n                    pokemon.image ||\r\n                    `http://localhost:8000/home/${imageIdForSrc(pokemon)}/img`\r\n                  }\r\n                  alt={pokemon.name}\r\n                />\r\n\r\n                <PokeName style={{ textTransform: \"uppercase\" }}>\r\n                  {pokemon.name}\r\n                </PokeName>\r\n\r\n                <PokemonImageTypeFrame>\r\n                  {(Array.isArray(pokemon.type) ? pokemon.type.slice(0, 2) : [pokemon.type])\r\n                    .filter(Boolean)\r\n                    .map((type) => (\r\n                      <PokemonImageType\r\n                        key={type}\r\n                        src={`http://localhost:8000/type/${encodeURIComponent(type)}.png`}\r\n                        alt={String(type)}\r\n                      />\r\n                    ))}\r\n                </PokemonImageTypeFrame>\r\n              </PokemonCard>\r\n\r\n              {i < group.length - 1 && <Arrow>→</Arrow>}\r\n            </div>\r\n          ))}\r\n        </PokemonEvoGrid>\r\n      ))}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CardPokemons;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}