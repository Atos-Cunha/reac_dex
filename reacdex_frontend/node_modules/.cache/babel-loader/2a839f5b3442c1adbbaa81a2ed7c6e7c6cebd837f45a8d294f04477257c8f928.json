{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\FrameFavs\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { get_fav, post_fav, del_fav } from '../services/fav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nconst FrameDef = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-left: 10%;\n  margin-right: 10%;\n  padding: 5px;\n`;\n_c = FrameDef;\nconst FrameRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  // gap: 10px;\n  background-color: #ffffff3c;\n  padding: 10px;\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 20px;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n_c2 = Spinner;\nfunction buildImgSrc(id) {\n  return `http://localhost:8000/fav/${id}.png`;\n}\nfunction FrameFavs() {\n  _s();\n  const [blocks, setBlocks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchFavs() {\n      try {\n        // 1) Buscar lista de tipos (com imagens corretas)\n        const resFavs = await fetch(\"http://localhost:8000/fav\");\n        if (!resFavs.ok) throw new Error(\"Erro ao buscar /favs\");\n        const favsData = await resFavs.json();\n\n        // Monta dicionário \n        const favMap = {};\n        favsData.forEach(t => {\n          favsData[t.name.toLowerCase()] = `http://localhost:8000${t.url}`;\n        });\n\n        // 2) Buscar relações advantage/foes\n        const resFf = await fetch(\"http://localhost:8000/typesFf\");\n        if (!resFf.ok) throw new Error(\"Erro ao buscar /typesFf\");\n        const ffData = await resFf.json();\n\n        // 3) Normalizar blocos\n        const normalized = [];\n        ffData.forEach(obj => {\n          Object.entries(obj).forEach(([typeName, details]) => {\n            const typeKey = typeName.toLowerCase();\n\n            // Só monta se o tipo tiver imagem no /types\n            if (!favsData[typeKey]) return;\n            normalized.push({\n              type: {\n                name: typeName,\n                url: favsData[typeKey]\n              },\n              advantage: (details.advantage || []).map(a => ({\n                name: a,\n                url: favsData[a.toLowerCase()] || \"\"\n              })),\n              weak: (details.foes || []).map(f => ({\n                name: f,\n                url: favsData[f.toLowerCase()] || \"\"\n              }))\n            });\n          });\n        });\n        console.log(\"✅ Normalizado com imagens:\", normalized);\n        setBlocks(normalized);\n      } catch (err) {\n        console.error(\"❌ Erro no fetch:\", err);\n        setBlocks([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchTypes();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FrameDef, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(FrameFavs, \"5HUFIOLA9NtCGj9OojkEN1vWsJ0=\");\n_c3 = FrameFavs;\nexport default FrameFavs;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FrameDef\");\n$RefreshReg$(_c2, \"Spinner\");\n$RefreshReg$(_c3, \"FrameFavs\");","map":{"version":3,"names":["useEffect","useState","styled","keyframes","get_fav","post_fav","del_fav","jsxDEV","_jsxDEV","spin","FrameDef","div","_c","FrameRow","Spinner","_c2","buildImgSrc","id","FrameFavs","_s","blocks","setBlocks","loading","setLoading","fetchFavs","resFavs","fetch","ok","Error","favsData","json","favMap","forEach","t","name","toLowerCase","url","resFf","ffData","normalized","obj","Object","entries","typeName","details","typeKey","push","type","advantage","map","a","weak","foes","f","console","log","err","error","fetchTypes","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/FrameFavs/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { get_fav, post_fav, del_fav } from '../services/fav';\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\nconst FrameDef = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  margin-left: 10%;\r\n  margin-right: 10%;\r\n  padding: 5px;\r\n`;\r\n\r\nconst FrameRow = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  // gap: 10px;\r\n  background-color: #ffffff3c;\r\n  padding: 10px;\r\n  border-radius: 20px;\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 20px;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\nfunction buildImgSrc(id) {\r\n  return `http://localhost:8000/fav/${id}.png`;\r\n}\r\n\r\nfunction FrameFavs() {\r\n  const [blocks, setBlocks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchFavs() {\r\n      try {\r\n        // 1) Buscar lista de tipos (com imagens corretas)\r\n        const resFavs = await fetch(\"http://localhost:8000/fav\");\r\n        if (!resFavs.ok) throw new Error(\"Erro ao buscar /favs\");\r\n        const favsData = await resFavs.json();\r\n\r\n        // Monta dicionário \r\n        const favMap = {};\r\n        favsData.forEach((t) => {\r\n          favsData[t.name.toLowerCase()] = `http://localhost:8000${t.url}`;\r\n        });\r\n\r\n        // 2) Buscar relações advantage/foes\r\n        const resFf = await fetch(\"http://localhost:8000/typesFf\");\r\n        if (!resFf.ok) throw new Error(\"Erro ao buscar /typesFf\");\r\n        const ffData = await resFf.json();\r\n\r\n        // 3) Normalizar blocos\r\n        const normalized = [];\r\n        ffData.forEach((obj) => {\r\n          Object.entries(obj).forEach(([typeName, details]) => {\r\n            const typeKey = typeName.toLowerCase();\r\n\r\n            // Só monta se o tipo tiver imagem no /types\r\n            if (!favsData[typeKey]) return;\r\n\r\n            normalized.push({\r\n              type: { name: typeName, url: favsData[typeKey] },\r\n              advantage: (details.advantage || []).map((a) => ({\r\n                name: a,\r\n                url: favsData[a.toLowerCase()] || \"\",\r\n              })),\r\n              weak: (details.foes || []).map((f) => ({\r\n                name: f,\r\n                url: favsData[f.toLowerCase()] || \"\",\r\n              })),\r\n            });\r\n          });\r\n        });\r\n\r\n        console.log(\"✅ Normalizado com imagens:\", normalized);\r\n        setBlocks(normalized);\r\n      } catch (err) {\r\n        console.error(\"❌ Erro no fetch:\", err);\r\n        setBlocks([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchTypes();\r\n  }, []);\r\n\r\n\r\n  if (loading) return <Spinner />;\r\n\r\n  return (\r\n    <FrameDef>\r\n    </FrameDef>\r\n  );\r\n}\r\n\r\nexport default FrameFavs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}