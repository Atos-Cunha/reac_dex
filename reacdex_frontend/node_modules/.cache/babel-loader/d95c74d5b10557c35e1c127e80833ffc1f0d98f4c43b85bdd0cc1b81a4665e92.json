{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\FrameTypes\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrameDef = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-left: 10%;\n  margin-right: 10%;\n  padding: 5px;\n`;\n_c = FrameDef;\nconst FrameRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  // gap: 10px;\n  background-color: #ffffff3c;\n  padding: 10px;\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n`;\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n`;\nconst SectionTitle = styled.h2`\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\n  color: #fff;\n  font-size: 20px;\n  letter-spacing: 1px;\n  margin: 8px 0 4px;\n  // text-shadow: 2px 2px 0 #000,\n  //              -2px 2px 0 #000,\n  //              -2px -2px 0 #000,\n  //              2px -2px 0 #000;\n`;\nconst Card = styled.div`\n  background-color: #ffffff3c;\n  width: 100px;\n  border-radius: 10px;\n  text-align: center;\n  padding: 6px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.08);\n  border: 1px solid #fff;\n`;\nconst PokeImg = styled.img`\n  width: 100px;\n  height: 100px;\n  object-fit: contain;\n`;\n\n// const spin = keyframes`\n//   0% { transform: rotate(0deg); }\n//   25% { border-top: 6px dotted #3498db; }\n//   75% { border-top: 6px dotted #3498db; }\n//   100% { transform: rotate(360deg); }\n// `;\n\nconst spin = keyframes`\n  0% {\n    transform: rotate(0deg);\n    border-top: 6px dotted transparent;\n  }\n  25% {\n    border-top: 6px dotted #3498db;\n  }\n  75% {\n    border-top: 6px dotted #3498db;\n  }\n  100% {\n    transform: rotate(360deg);\n    border-top: 6px dotted transparent;\n  }\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 50px;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n_c2 = Spinner;\nfunction buildImgSrc(typeName) {\n  // return `http://localhost:8000/types/${typeName}.png`;\n}\nfunction FrameTypes() {\n  _s();\n  const [evolves, setEvolves] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // useEffect(() => {\n  //   async function fetchTypes() {\n  //     try {\n  //       // 1) Buscar lista de tipos (com imagens corretas)\n  //       const resTypes = await fetch(\"http://localhost:8000/types\");\n  //       if (!resTypes.ok) throw new Error(\"Erro ao buscar /types\");\n  //       const typesData = await resTypes.json();\n\n  //       // Monta dicionário { Fire: \"/types/fire.png\", ... }\n  //       const typeMap = {};\n  //       typesData.forEach((t) => {\n  //         typeMap[t.name.toLowerCase()] = `http://localhost:8000${t.url}`;\n  //       });\n\n  //       // 2) Buscar relações advantage/foes\n  //       const resFf = await fetch(\"http://localhost:8000/typesFf\");\n  //       if (!resFf.ok) throw new Error(\"Erro ao buscar /typesFf\");\n  //       const ffData = await resFf.json();\n\n  //       // 3) Normalizar blocos\n  //       const normalized = [];\n  //       ffData.forEach((obj) => {\n  //         Object.entries(obj).forEach(([typeName, details]) => {\n  //           const typeKey = typeName.toLowerCase();\n\n  //           // Só monta se o tipo tiver imagem no /types\n  //           if (!typeMap[typeKey]) return;\n\n  //           normalized.push({\n  //             type: { name: typeName, url: typeMap[typeKey] },\n  //             advantage: (details.advantage || []).map((a) => ({\n  //               name: a,\n  //               url: typeMap[a.toLowerCase()] || \"\",\n  //             })),\n  //             weak: (details.foes || []).map((f) => ({\n  //               name: f,\n  //               url: typeMap[f.toLowerCase()] || \"\",\n  //             })),\n  //           });\n  //         });\n  //       });\n  //       console.log(\"✅ Normalizado com imagens:\", normalized);\n  //       setBlocks(normalized);\n  //     } catch (err) {\n  //       console.error(\"❌ Erro no fetch:\", err);\n  //       setBlocks([]);\n  //     } finally {\n  //       setLoading(false);\n  //     }\n  //   }\n\n  //   fetchTypes();\n  // }, []);\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FrameDef, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(FrameTypes, \"F1f9D807MNBTVAptjgu6bkFXPaI=\");\n_c3 = FrameTypes;\nexport default FrameTypes;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FrameDef\");\n$RefreshReg$(_c2, \"Spinner\");\n$RefreshReg$(_c3, \"FrameTypes\");","map":{"version":3,"names":["useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","FrameDef","div","_c","FrameRow","Column","SectionTitle","h2","Card","PokeImg","img","spin","Spinner","_c2","buildImgSrc","typeName","FrameTypes","_s","evolves","setEvolves","loading","setLoading","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/FrameTypes/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst FrameDef = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  margin-left: 10%;\r\n  margin-right: 10%;\r\n  padding: 5px;\r\n`;\r\nconst FrameRow = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  // gap: 10px;\r\n  background-color: #ffffff3c;\r\n  padding: 10px;\r\n  border-radius: 20px;\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n`;\r\n\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n`;\r\n\r\nconst SectionTitle = styled.h2`\r\n  font-family: 'Montserrat','Helvetica Neue',Arial,sans-serif;\r\n  color: #fff;\r\n  font-size: 20px;\r\n  letter-spacing: 1px;\r\n  margin: 8px 0 4px;\r\n  // text-shadow: 2px 2px 0 #000,\r\n  //              -2px 2px 0 #000,\r\n  //              -2px -2px 0 #000,\r\n  //              2px -2px 0 #000;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  background-color: #ffffff3c;\r\n  width: 100px;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  padding: 6px;\r\n  box-shadow: 0 2px 10px rgba(0,0,0,0.08);\r\n  border: 1px solid #fff;\r\n`;\r\n\r\nconst PokeImg = styled.img`\r\n  width: 100px;\r\n  height: 100px;\r\n  object-fit: contain;\r\n`;\r\n\r\n// const spin = keyframes`\r\n//   0% { transform: rotate(0deg); }\r\n//   25% { border-top: 6px dotted #3498db; }\r\n//   75% { border-top: 6px dotted #3498db; }\r\n//   100% { transform: rotate(360deg); }\r\n// `;\r\n\r\nconst spin = keyframes`\r\n  0% {\r\n    transform: rotate(0deg);\r\n    border-top: 6px dotted transparent;\r\n  }\r\n  25% {\r\n    border-top: 6px dotted #3498db;\r\n  }\r\n  75% {\r\n    border-top: 6px dotted #3498db;\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n    border-top: 6px dotted transparent;\r\n  }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 50px;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\nfunction buildImgSrc(typeName) {\r\n  // return `http://localhost:8000/types/${typeName}.png`;\r\n}\r\n\r\nfunction FrameTypes() {\r\n  const [evolves, setEvolves] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // useEffect(() => {\r\n  //   async function fetchTypes() {\r\n  //     try {\r\n  //       // 1) Buscar lista de tipos (com imagens corretas)\r\n  //       const resTypes = await fetch(\"http://localhost:8000/types\");\r\n  //       if (!resTypes.ok) throw new Error(\"Erro ao buscar /types\");\r\n  //       const typesData = await resTypes.json();\r\n\r\n  //       // Monta dicionário { Fire: \"/types/fire.png\", ... }\r\n  //       const typeMap = {};\r\n  //       typesData.forEach((t) => {\r\n  //         typeMap[t.name.toLowerCase()] = `http://localhost:8000${t.url}`;\r\n  //       });\r\n\r\n  //       // 2) Buscar relações advantage/foes\r\n  //       const resFf = await fetch(\"http://localhost:8000/typesFf\");\r\n  //       if (!resFf.ok) throw new Error(\"Erro ao buscar /typesFf\");\r\n  //       const ffData = await resFf.json();\r\n\r\n  //       // 3) Normalizar blocos\r\n  //       const normalized = [];\r\n  //       ffData.forEach((obj) => {\r\n  //         Object.entries(obj).forEach(([typeName, details]) => {\r\n  //           const typeKey = typeName.toLowerCase();\r\n\r\n  //           // Só monta se o tipo tiver imagem no /types\r\n  //           if (!typeMap[typeKey]) return;\r\n\r\n  //           normalized.push({\r\n  //             type: { name: typeName, url: typeMap[typeKey] },\r\n  //             advantage: (details.advantage || []).map((a) => ({\r\n  //               name: a,\r\n  //               url: typeMap[a.toLowerCase()] || \"\",\r\n  //             })),\r\n  //             weak: (details.foes || []).map((f) => ({\r\n  //               name: f,\r\n  //               url: typeMap[f.toLowerCase()] || \"\",\r\n  //             })),\r\n  //           });\r\n  //         });\r\n  //       });\r\n  //       console.log(\"✅ Normalizado com imagens:\", normalized);\r\n  //       setBlocks(normalized);\r\n  //     } catch (err) {\r\n  //       console.error(\"❌ Erro no fetch:\", err);\r\n  //       setBlocks([]);\r\n  //     } finally {\r\n  //       setLoading(false);\r\n  //     }\r\n  //   }\r\n\r\n  //   fetchTypes();\r\n  // }, []);\r\n\r\n\r\n  if (loading) return <Spinner />;\r\n\r\n  return (\r\n    <FrameDef></FrameDef>\r\n  );\r\n}\r\n\r\nexport default FrameTypes;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,IAAIC,SAAS,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAPIF,QAAQ;AAQd,MAAMG,QAAQ,GAAGP,MAAM,CAACK,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,MAAM,GAAGR,MAAM,CAACK,GAAG;AACzB;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,YAAY,GAAGT,MAAM,CAACU,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,IAAI,GAAGX,MAAM,CAACK,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,OAAO,GAAGZ,MAAM,CAACa,GAAG;AAC1B;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAGb,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMc,OAAO,GAAGf,MAAM,CAACK,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,eAAeS,IAAI;AACnB;AACA,CAAC;AAACE,GAAA,GARID,OAAO;AAUb,SAASE,WAAWA,CAACC,QAAQ,EAAE;EAC7B;AAAA;AAGF,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA,IAAIwB,OAAO,EAAE,oBAAOpB,OAAA,CAACY,OAAO;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAE/B,oBACEzB,OAAA,CAACC,QAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAW,CAAC;AAEzB;AAACR,EAAA,CAhEQD,UAAU;AAAAU,GAAA,GAAVV,UAAU;AAkEnB,eAAeA,UAAU;AAAC,IAAAb,EAAA,EAAAU,GAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAxB,EAAA;AAAAwB,YAAA,CAAAd,GAAA;AAAAc,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}