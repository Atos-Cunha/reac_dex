{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\FrameTypes\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FramePokeImgType = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 15px;\n  margin: 5px;\n`;\n_c = FramePokeImgType;\nconst Card = styled.div`\n  height: auto;\n  margin: 0 auto;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n  background: linear-gradient(-45deg, #e3f5fd, #c9e9fa, #e3f5fd);\n  padding: 15px;\n`;\n_c2 = Card;\nconst PokeImgType = styled.img`\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n`;\n_c3 = PokeImgType;\nconst TitleType = styled.h3`\n  text-transform: uppercase;\n  font-size: 18px;\n  margin: 10px 0;\n`;\n_c4 = TitleType;\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n_c5 = Spinner;\nfunction FrameTypes() {\n  _s();\n  const [types, setTypes] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchTypes() {\n      try {\n        var _data$, _data$2;\n        // 1 - Buscar lista de tipos\n        const res = await fetch(\"http://localhost:8000/types\");\n        if (!res.ok) throw new Error(\"Erro ao buscar tipos\");\n        const data = await res.json();\n        console.log(\"Resposta do backend /types:\", data);\n\n        // detectar formato da resposta\n        let uniqueTypes;\n        if (Array.isArray(data) && typeof data[0] === \"string\") {\n          // [\"fire\",\"water\",\"grass\"]\n          uniqueTypes = [...new Set(data)];\n        } else if (Array.isArray(data) && (_data$ = data[0]) !== null && _data$ !== void 0 && _data$.type) {\n          // [{ type: \"fire\" }, { type: \"water\" }]\n          uniqueTypes = [...new Set(data.map(t => t.type))];\n        } else if (Array.isArray(data) && (_data$2 = data[0]) !== null && _data$2 !== void 0 && _data$2.name) {\n          // [{ name: \"fire\" }]\n          uniqueTypes = [...new Set(data.map(t => t.name))];\n        } else {\n          throw new Error(\"Formato de resposta inesperado em /types\");\n        }\n        console.log(uniqueTypes);\n        // 2 - Para cada tipo, buscar imagens dos pokémons\n        const typeData = {};\n        for (const type of uniqueTypes) {\n          try {\n            const resType = await fetch(`http://localhost:8000/types/${encodeURIComponent(type).png}`);\n            if (!resType.ok) throw new Error(`Erro ao buscar ${type}`);\n            const imgs = await resType.json(); // espera array de URLs\n            console.log(`Pokémons do tipo ${type}:`, imgs);\n            typeData[type] = imgs;\n          } catch (err) {\n            console.error(\"Erro ao buscar imagens de\", type, err.message);\n            typeData[type] = [];\n          }\n        }\n        setTypes(typeData);\n      } catch (err) {\n        console.error(\"Erro no fetch:\", err.message);\n        setTypes({});\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchTypes();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 23\n  }, this);\n  if (!Object.keys(types).length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Nenhum tipo encontrado.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 42\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FramePokeImgType, {\n    children: Object.entries(types).map(([type, imgs]) => /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(TitleType, {\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), imgs.map((img, idx) => /*#__PURE__*/_jsxDEV(PokeImgType, {\n        src: `http://localhost:8000/types/${encodeURIComponent(type).png}`,\n        alt: `${type}-${idx}`\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this))]\n    }, type, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(FrameTypes, \"VrPlc2wWxyP7Mj7n4VD4NzFvZ80=\");\n_c6 = FrameTypes;\nexport default FrameTypes;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"FramePokeImgType\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"PokeImgType\");\n$RefreshReg$(_c4, \"TitleType\");\n$RefreshReg$(_c5, \"Spinner\");\n$RefreshReg$(_c6, \"FrameTypes\");","map":{"version":3,"names":["useEffect","useState","styled","keyframes","jsxDEV","_jsxDEV","FramePokeImgType","div","_c","Card","_c2","PokeImgType","img","_c3","TitleType","h3","_c4","spin","Spinner","_c5","FrameTypes","_s","types","setTypes","loading","setLoading","fetchTypes","_data$","_data$2","res","fetch","ok","Error","data","json","console","log","uniqueTypes","Array","isArray","Set","type","map","t","name","typeData","resType","encodeURIComponent","png","imgs","err","error","message","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","children","entries","idx","src","alt","_c6","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/FrameTypes/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst FramePokeImgType = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  padding: 15px;\r\n  margin: 5px;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  height: auto;\r\n  margin: 0 auto;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  background: linear-gradient(-45deg, #e3f5fd, #c9e9fa, #e3f5fd);\r\n  padding: 15px;\r\n`;\r\n\r\nconst PokeImgType = styled.img`\r\n  width: 60px;\r\n  height: 60px;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst TitleType = styled.h3`\r\n  text-transform: uppercase;\r\n  font-size: 18px;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\nfunction FrameTypes() {\r\n  const [types, setTypes] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchTypes() {\r\n      try {\r\n        // 1 - Buscar lista de tipos\r\n        const res = await fetch(\"http://localhost:8000/types\");\r\n        if (!res.ok) throw new Error(\"Erro ao buscar tipos\");\r\n        const data = await res.json();\r\n        console.log(\"Resposta do backend /types:\", data);\r\n\r\n        // detectar formato da resposta\r\n        let uniqueTypes;\r\n        if (Array.isArray(data) && typeof data[0] === \"string\") {\r\n          // [\"fire\",\"water\",\"grass\"]\r\n          uniqueTypes = [...new Set(data)];\r\n        } else if (Array.isArray(data) && data[0]?.type) {\r\n          // [{ type: \"fire\" }, { type: \"water\" }]\r\n          uniqueTypes = [...new Set(data.map((t) => t.type))];\r\n        } else if (Array.isArray(data) && data[0]?.name) {\r\n          // [{ name: \"fire\" }]\r\n          uniqueTypes = [...new Set(data.map((t) => t.name))];\r\n        } else {\r\n          throw new Error(\"Formato de resposta inesperado em /types\");\r\n        }\r\n        console.log(uniqueTypes)\r\n        // 2 - Para cada tipo, buscar imagens dos pokémons\r\n        const typeData = {};\r\n        for (const type of uniqueTypes) {\r\n          try {\r\n            const resType = await fetch(\r\n              `http://localhost:8000/types/${encodeURIComponent(type).png}`\r\n            );\r\n            if (!resType.ok) throw new Error(`Erro ao buscar ${type}`);\r\n            const imgs = await resType.json(); // espera array de URLs\r\n            console.log(`Pokémons do tipo ${type}:`, imgs);\r\n            typeData[type] = imgs;\r\n          } catch (err) {\r\n            console.error(\"Erro ao buscar imagens de\", type, err.message);\r\n            typeData[type] = [];\r\n          }\r\n        }\r\n\r\n        setTypes(typeData);\r\n      } catch (err) {\r\n        console.error(\"Erro no fetch:\", err.message);\r\n        setTypes({});\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchTypes();\r\n  }, []);\r\n\r\n  if (loading) return <Spinner />;\r\n  if (!Object.keys(types).length) return <p>Nenhum tipo encontrado.</p>;\r\n\r\n  return (\r\n    <FramePokeImgType>\r\n      {Object.entries(types).map(([type, imgs]) => (\r\n        <Card key={type}>\r\n          <TitleType>{type}</TitleType>\r\n            {imgs.map((img, idx) => (\r\n              <PokeImgType\r\n                key={idx}\r\n                src={`http://localhost:8000/types/${encodeURIComponent(type).png}`}\r\n                alt={`${type}-${idx}`}\r\n              />\r\n            ))}\r\n        </Card>\r\n      ))}\r\n    </FramePokeImgType>\r\n  );\r\n}\r\n\r\nexport default FrameTypes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}