{"ast":null,"code":"function handleSearch(evento) {\n  const textoDigitado = evento.target.value.toLowerCase();\n  if (textoDigitado.trim() === \"\") {\n    setPokemons([]);\n    return;\n  }\n\n  // Pesquisa bÃ¡sica nos pokemons da /home\n  let resultadoPesquisa = allPokemons.filter(pokemon => {\n    var _pokemon$name;\n    return (_pokemon$name = pokemon.name) === null || _pokemon$name === void 0 ? void 0 : _pokemon$name.toLowerCase().includes(textoDigitado);\n  });\n\n  // ðŸ”Ž Se checkbox de evoluÃ§Ãµes estiver ativo\n  if (showEvolves) {\n    // 1. Verificar se o pesquisado Ã© base de evoluÃ§Ã£o\n    const evolucaoDireta = evolvesList.filter(e => {\n      var _e$pokemon, _e$pokemon$name, _e$evolve;\n      return ((_e$pokemon = e.pokemon) === null || _e$pokemon === void 0 ? void 0 : (_e$pokemon$name = _e$pokemon.name) === null || _e$pokemon$name === void 0 ? void 0 : _e$pokemon$name.toLowerCase().includes(textoDigitado)) || ((_e$evolve = e.evolve) === null || _e$evolve === void 0 ? void 0 : _e$evolve.some(ev => ev.name.toLowerCase().includes(textoDigitado)));\n    });\n\n    // 2. Adicionar as evoluÃ§Ãµes encontradas\n    evolucaoDireta.forEach(linha => {\n      var _linha$evolve;\n      // PokÃ©mon base\n      const base = allPokemons.find(p => {\n        var _linha$pokemon;\n        return formatNumber(p.id) === ((_linha$pokemon = linha.pokemon) === null || _linha$pokemon === void 0 ? void 0 : _linha$pokemon.number);\n      });\n      if (base && !resultadoPesquisa.some(r => r.id === base.id)) {\n        resultadoPesquisa.push(base);\n      }\n\n      // Cada evoluÃ§Ã£o\n      (_linha$evolve = linha.evolve) === null || _linha$evolve === void 0 ? void 0 : _linha$evolve.forEach(ev => {\n        const evo = allPokemons.find(p => formatNumber(p.id) === ev.number);\n        if (evo && !resultadoPesquisa.some(r => r.id === evo.id)) {\n          resultadoPesquisa.push(evo);\n        }\n      });\n    });\n  }\n  setPokemons(resultadoPesquisa);\n}","map":{"version":3,"names":["handleSearch","evento","textoDigitado","target","value","toLowerCase","trim","setPokemons","resultadoPesquisa","allPokemons","filter","pokemon","_pokemon$name","name","includes","showEvolves","evolucaoDireta","evolvesList","e","_e$pokemon","_e$pokemon$name","_e$evolve","evolve","some","ev","forEach","linha","_linha$evolve","base","find","p","_linha$pokemon","formatNumber","id","number","r","push","evo"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/Pesquisa/index.js"],"sourcesContent":["function handleSearch(evento) {\r\n  const textoDigitado = evento.target.value.toLowerCase();\r\n  if (textoDigitado.trim() === \"\") {\r\n    setPokemons([]);\r\n    return;\r\n  }\r\n\r\n  // Pesquisa bÃ¡sica nos pokemons da /home\r\n  let resultadoPesquisa = allPokemons.filter((pokemon) =>\r\n    pokemon.name?.toLowerCase().includes(textoDigitado)\r\n  );\r\n\r\n  // ðŸ”Ž Se checkbox de evoluÃ§Ãµes estiver ativo\r\n  if (showEvolves) {\r\n    // 1. Verificar se o pesquisado Ã© base de evoluÃ§Ã£o\r\n    const evolucaoDireta = evolvesList.filter(\r\n      (e) =>\r\n        e.pokemon?.name?.toLowerCase().includes(textoDigitado) ||\r\n        e.evolve?.some((ev) => ev.name.toLowerCase().includes(textoDigitado))\r\n    );\r\n\r\n    // 2. Adicionar as evoluÃ§Ãµes encontradas\r\n    evolucaoDireta.forEach((linha) => {\r\n      // PokÃ©mon base\r\n      const base = allPokemons.find(\r\n        (p) => formatNumber(p.id) === linha.pokemon?.number\r\n      );\r\n      if (base && !resultadoPesquisa.some((r) => r.id === base.id)) {\r\n        resultadoPesquisa.push(base);\r\n      }\r\n\r\n      // Cada evoluÃ§Ã£o\r\n      linha.evolve?.forEach((ev) => {\r\n        const evo = allPokemons.find(\r\n          (p) => formatNumber(p.id) === ev.number\r\n        );\r\n        if (evo && !resultadoPesquisa.some((r) => r.id === evo.id)) {\r\n          resultadoPesquisa.push(evo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  setPokemons(resultadoPesquisa);\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAYA,CAACC,MAAM,EAAE;EAC5B,MAAMC,aAAa,GAAGD,MAAM,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;EACvD,IAAIH,aAAa,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC/BC,WAAW,CAAC,EAAE,CAAC;IACf;EACF;;EAEA;EACA,IAAIC,iBAAiB,GAAGC,WAAW,CAACC,MAAM,CAAEC,OAAO;IAAA,IAAAC,aAAA;IAAA,QAAAA,aAAA,GACjDD,OAAO,CAACE,IAAI,cAAAD,aAAA,uBAAZA,aAAA,CAAcP,WAAW,CAAC,CAAC,CAACS,QAAQ,CAACZ,aAAa,CAAC;EAAA,CACrD,CAAC;;EAED;EACA,IAAIa,WAAW,EAAE;IACf;IACA,MAAMC,cAAc,GAAGC,WAAW,CAACP,MAAM,CACtCQ,CAAC;MAAA,IAAAC,UAAA,EAAAC,eAAA,EAAAC,SAAA;MAAA,OACA,EAAAF,UAAA,GAAAD,CAAC,CAACP,OAAO,cAAAQ,UAAA,wBAAAC,eAAA,GAATD,UAAA,CAAWN,IAAI,cAAAO,eAAA,uBAAfA,eAAA,CAAiBf,WAAW,CAAC,CAAC,CAACS,QAAQ,CAACZ,aAAa,CAAC,OAAAmB,SAAA,GACtDH,CAAC,CAACI,MAAM,cAAAD,SAAA,uBAARA,SAAA,CAAUE,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACX,IAAI,CAACR,WAAW,CAAC,CAAC,CAACS,QAAQ,CAACZ,aAAa,CAAC,CAAC;IAAA,CACzE,CAAC;;IAED;IACAc,cAAc,CAACS,OAAO,CAAEC,KAAK,IAAK;MAAA,IAAAC,aAAA;MAChC;MACA,MAAMC,IAAI,GAAGnB,WAAW,CAACoB,IAAI,CAC1BC,CAAC;QAAA,IAAAC,cAAA;QAAA,OAAKC,YAAY,CAACF,CAAC,CAACG,EAAE,CAAC,OAAAF,cAAA,GAAKL,KAAK,CAACf,OAAO,cAAAoB,cAAA,uBAAbA,cAAA,CAAeG,MAAM;MAAA,CACrD,CAAC;MACD,IAAIN,IAAI,IAAI,CAACpB,iBAAiB,CAACe,IAAI,CAAEY,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKL,IAAI,CAACK,EAAE,CAAC,EAAE;QAC5DzB,iBAAiB,CAAC4B,IAAI,CAACR,IAAI,CAAC;MAC9B;;MAEA;MACA,CAAAD,aAAA,GAAAD,KAAK,CAACJ,MAAM,cAAAK,aAAA,uBAAZA,aAAA,CAAcF,OAAO,CAAED,EAAE,IAAK;QAC5B,MAAMa,GAAG,GAAG5B,WAAW,CAACoB,IAAI,CACzBC,CAAC,IAAKE,YAAY,CAACF,CAAC,CAACG,EAAE,CAAC,KAAKT,EAAE,CAACU,MACnC,CAAC;QACD,IAAIG,GAAG,IAAI,CAAC7B,iBAAiB,CAACe,IAAI,CAAEY,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKI,GAAG,CAACJ,EAAE,CAAC,EAAE;UAC1DzB,iBAAiB,CAAC4B,IAAI,CAACC,GAAG,CAAC;QAC7B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA9B,WAAW,CAACC,iBAAiB,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}