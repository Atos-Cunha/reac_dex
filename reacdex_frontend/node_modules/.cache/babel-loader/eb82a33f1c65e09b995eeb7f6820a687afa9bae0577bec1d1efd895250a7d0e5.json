{"ast":null,"code":"var _jsxFileName = \"D:\\\\clone\\\\reac_dex\\\\reacdex_frontend\\\\src\\\\componentes\\\\FrameFavs\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { get_fav, post_fav, del_fav } from '../services/fav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nconst FrameDef = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-left: 10%;\n  margin-right: 10%;\n  padding: 5px;\n`;\n_c = FrameDef;\nconst FrameRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  // gap: 10px;\n  background-color: #ffffff3c;\n  padding: 10px;\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n`;\nconst Spinner = styled.div`\n  border: 6px solid #f3f3f3;\n  border-top: 6px solid #3498db;\n  border-radius: 20px;\n  width: 60px;\n  height: 60px;\n  animation: ${spin} 1s linear infinite;\n  margin: 50px auto;\n`;\n_c2 = Spinner;\nfunction buildImgSrc(typeName) {\n  return `http://localhost:8000/types/${typeName}.png`;\n}\n\n/** Normaliza cada type em um bloco com { type, advantage[], weak[] } */\nfunction normalizeTypesFf(data) {\n  const result = [];\n  data.forEach(obj => {\n    Object.entries(obj).forEach(([typeName, details]) => {\n      result.push({\n        type: {\n          name: typeName,\n          url: buildImgSrc(typeName)\n        },\n        advantage: (details.advantage || []).map(a => ({\n          name: a,\n          url: buildImgSrc(a)\n        })),\n        weak: (details.foes || []).map(f => ({\n          name: f,\n          url: buildImgSrc(f)\n        }))\n      });\n    });\n  });\n  return result;\n}\nfunction FrameFavs() {\n  _s();\n  const [blocks, setBlocks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchFavs() {\n      try {\n        // 1) Buscar lista de tipos (com imagens corretas)\n        const resFavs = await fetch(\"http://localhost:8000/fav\");\n        if (!resFavs.ok) throw new Error(\"Erro ao buscar /types\");\n        const favsData = await resFavs.json();\n\n        // Monta dicionário { Fire: \"/types/fire.png\", ... }\n        const typeMap = {};\n        typesData.forEach(t => {\n          typeMap[t.name.toLowerCase()] = `http://localhost:8000${t.url}`;\n        });\n\n        // 2) Buscar relações advantage/foes\n        const resFf = await fetch(\"http://localhost:8000/typesFf\");\n        if (!resFf.ok) throw new Error(\"Erro ao buscar /typesFf\");\n        const ffData = await resFf.json();\n\n        // 3) Normalizar blocos\n        const normalized = [];\n        ffData.forEach(obj => {\n          Object.entries(obj).forEach(([typeName, details]) => {\n            const typeKey = typeName.toLowerCase();\n\n            // Só monta se o tipo tiver imagem no /types\n            if (!typeMap[typeKey]) return;\n            normalized.push({\n              type: {\n                name: typeName,\n                url: typeMap[typeKey]\n              },\n              advantage: (details.advantage || []).map(a => ({\n                name: a,\n                url: typeMap[a.toLowerCase()] || \"\"\n              })),\n              weak: (details.foes || []).map(f => ({\n                name: f,\n                url: typeMap[f.toLowerCase()] || \"\"\n              }))\n            });\n          });\n        });\n        console.log(\"✅ Normalizado com imagens:\", normalized);\n        setBlocks(normalized);\n      } catch (err) {\n        console.error(\"❌ Erro no fetch:\", err);\n        setBlocks([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchTypes();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FrameDef, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(FrameFavs, \"5HUFIOLA9NtCGj9OojkEN1vWsJ0=\");\n_c3 = FrameFavs;\nexport default FrameFavs;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FrameDef\");\n$RefreshReg$(_c2, \"Spinner\");\n$RefreshReg$(_c3, \"FrameFavs\");","map":{"version":3,"names":["useEffect","useState","styled","keyframes","get_fav","post_fav","del_fav","jsxDEV","_jsxDEV","spin","FrameDef","div","_c","FrameRow","Spinner","_c2","buildImgSrc","typeName","normalizeTypesFf","data","result","forEach","obj","Object","entries","details","push","type","name","url","advantage","map","a","weak","foes","f","FrameFavs","_s","blocks","setBlocks","loading","setLoading","fetchFavs","resFavs","fetch","ok","Error","favsData","json","typeMap","typesData","t","toLowerCase","resFf","ffData","normalized","typeKey","console","log","err","error","fetchTypes","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["D:/clone/reac_dex/reacdex_frontend/src/componentes/FrameFavs/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { get_fav, post_fav, del_fav } from '../services/fav';\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\nconst FrameDef = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  margin-left: 10%;\r\n  margin-right: 10%;\r\n  padding: 5px;\r\n`;\r\n\r\nconst FrameRow = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  // gap: 10px;\r\n  background-color: #ffffff3c;\r\n  padding: 10px;\r\n  border-radius: 20px;\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 6px solid #f3f3f3;\r\n  border-top: 6px solid #3498db;\r\n  border-radius: 20px;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 1s linear infinite;\r\n  margin: 50px auto;\r\n`;\r\n\r\nfunction buildImgSrc(typeName) {\r\n  return `http://localhost:8000/types/${typeName}.png`;\r\n}\r\n\r\n/** Normaliza cada type em um bloco com { type, advantage[], weak[] } */\r\nfunction normalizeTypesFf(data) {\r\n  const result = [];\r\n\r\n  data.forEach((obj) => {\r\n    Object.entries(obj).forEach(([typeName, details]) => {\r\n      result.push({\r\n        type: { name: typeName, url: buildImgSrc(typeName) },\r\n        advantage: (details.advantage || []).map((a) => ({\r\n          name: a,\r\n          url: buildImgSrc(a),\r\n        })),\r\n        weak: (details.foes || []).map((f) => ({\r\n          name: f,\r\n          url: buildImgSrc(f),\r\n        })),\r\n      });\r\n    });\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction FrameFavs() {\r\n  const [blocks, setBlocks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchFavs() {\r\n      try {\r\n        // 1) Buscar lista de tipos (com imagens corretas)\r\n        const resFavs = await fetch(\"http://localhost:8000/fav\");\r\n        if (!resFavs.ok) throw new Error(\"Erro ao buscar /types\");\r\n        const favsData = await resFavs.json();\r\n\r\n        // Monta dicionário { Fire: \"/types/fire.png\", ... }\r\n        const typeMap = {};\r\n        typesData.forEach((t) => {\r\n          typeMap[t.name.toLowerCase()] = `http://localhost:8000${t.url}`;\r\n        });\r\n\r\n        // 2) Buscar relações advantage/foes\r\n        const resFf = await fetch(\"http://localhost:8000/typesFf\");\r\n        if (!resFf.ok) throw new Error(\"Erro ao buscar /typesFf\");\r\n        const ffData = await resFf.json();\r\n\r\n        // 3) Normalizar blocos\r\n        const normalized = [];\r\n        ffData.forEach((obj) => {\r\n          Object.entries(obj).forEach(([typeName, details]) => {\r\n            const typeKey = typeName.toLowerCase();\r\n\r\n            // Só monta se o tipo tiver imagem no /types\r\n            if (!typeMap[typeKey]) return;\r\n\r\n            normalized.push({\r\n              type: { name: typeName, url: typeMap[typeKey] },\r\n              advantage: (details.advantage || []).map((a) => ({\r\n                name: a,\r\n                url: typeMap[a.toLowerCase()] || \"\",\r\n              })),\r\n              weak: (details.foes || []).map((f) => ({\r\n                name: f,\r\n                url: typeMap[f.toLowerCase()] || \"\",\r\n              })),\r\n            });\r\n          });\r\n        });\r\n\r\n        console.log(\"✅ Normalizado com imagens:\", normalized);\r\n        setBlocks(normalized);\r\n      } catch (err) {\r\n        console.error(\"❌ Erro no fetch:\", err);\r\n        setBlocks([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchTypes();\r\n  }, []);\r\n\r\n\r\n  if (loading) return <Spinner />;\r\n\r\n  return (\r\n    <FrameDef>\r\n    </FrameDef>\r\n  );\r\n}\r\n\r\nexport default FrameFavs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}